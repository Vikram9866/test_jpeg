-- File: test.vhd
-- Generated by MyHDL 1.0dev
-- Date: Fri May 27 10:54:31 2016


library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use std.textio.all;

use work.pck_myhdl_10.all;

entity test is
end entity test;


architecture MyHDL of test is



signal rgb_blue: unsigned(7 downto 0);
signal reset: std_logic;
signal ycbcr_cb: unsigned(7 downto 0);
signal enable_out: std_logic;
signal clk: std_logic;
signal output_cr_s: unsigned(7 downto 0);
signal rgb_green: unsigned(7 downto 0);
signal enable_in: std_logic;
signal output_cb_s: unsigned(7 downto 0);
signal ycbcr_cr: unsigned(7 downto 0);
signal rgb_red: unsigned(7 downto 0);
signal ycbcr_y: unsigned(7 downto 0);
signal output_y_s: unsigned(7 downto 0);
signal rgb2ycbcr_1_Y2_s: signed (14 downto 0);
signal rgb2ycbcr_1_Y3_s: signed (14 downto 0);
signal rgb2ycbcr_1_Y1_s: signed (14 downto 0);
signal rgb2ycbcr_1_Cr1_s: signed (14 downto 0);
signal rgb2ycbcr_1_G_s: signed (8 downto 0);
signal rgb2ycbcr_1_Cr_sum: signed (23 downto 0);
signal rgb2ycbcr_1_Cr2_s: signed (14 downto 0);
signal rgb2ycbcr_1_offset_cb: signed (23 downto 0);
signal rgb2ycbcr_1_Cr3_s: signed (14 downto 0);
signal rgb2ycbcr_1_offset_y: signed (23 downto 0);
signal rgb2ycbcr_1_Cb_sum: signed (23 downto 0);
signal rgb2ycbcr_1_R_s: signed (8 downto 0);
signal rgb2ycbcr_1_offset_cr: signed (23 downto 0);
signal rgb2ycbcr_1_Cb1_s: signed (14 downto 0);
signal rgb2ycbcr_1_Y_sum: signed (23 downto 0);
signal rgb2ycbcr_1_Cb2_s: signed (14 downto 0);
signal rgb2ycbcr_1_Cb3_s: signed (14 downto 0);
signal rgb2ycbcr_1_B_s: signed (8 downto 0);
type t_array_rgb2ycbcr_1_Cb_reg is array(0 to 3-1) of signed (23 downto 0);
signal rgb2ycbcr_1_Cb_reg: t_array_rgb2ycbcr_1_Cb_reg;
type t_array_rgb2ycbcr_1_enable_out_reg is array(0 to 2-1) of std_logic;
signal rgb2ycbcr_1_enable_out_reg: t_array_rgb2ycbcr_1_enable_out_reg;
type t_array_rgb2ycbcr_1_Cr_reg is array(0 to 3-1) of signed (23 downto 0);
signal rgb2ycbcr_1_Cr_reg: t_array_rgb2ycbcr_1_Cr_reg;
type t_array_rgb2ycbcr_1_Y_reg is array(0 to 3-1) of signed (23 downto 0);
signal rgb2ycbcr_1_Y_reg: t_array_rgb2ycbcr_1_Y_reg;

begin


rgb2ycbcr_1_Y2_s <= to_signed(9617, 15);
rgb2ycbcr_1_Y3_s <= to_signed(1868, 15);
rgb2ycbcr_1_Y1_s <= to_signed(4914, 15);
rgb2ycbcr_1_Cr1_s <= to_signed(8192, 15);
rgb2ycbcr_1_Cr2_s <= to_signed(-6860, 15);
rgb2ycbcr_1_offset_cb <= to_signed(2097152, 24);
rgb2ycbcr_1_Cr3_s <= to_signed(-1332, 15);
rgb2ycbcr_1_offset_y <= to_signed(0, 24);
rgb2ycbcr_1_offset_cr <= to_signed(2097152, 24);
rgb2ycbcr_1_Cb1_s <= to_signed(-2764, 15);
rgb2ycbcr_1_Cb2_s <= to_signed(-5428, 15);
rgb2ycbcr_1_Cb3_s <= to_signed(8192, 15);



TEST_STIMULUS: process is
    variable L: line;
begin
    wait until falling_edge(clk);
    enable_in <= '1';
    for i in 0 to 50-1 loop
        wait until falling_edge(clk);
        case i is
            when 0 => rgb_red <= "01100101";
            when 1 => rgb_red <= "10011011";
            when 2 => rgb_red <= "00110111";
            when 3 => rgb_red <= "11001011";
            when 4 => rgb_red <= "00101011";
            when 5 => rgb_red <= "10001101";
            when 6 => rgb_red <= "10011000";
            when 7 => rgb_red <= "00011010";
            when 8 => rgb_red <= "11001100";
            when 9 => rgb_red <= "01000111";
            when 10 => rgb_red <= "10101011";
            when 11 => rgb_red <= "10000111";
            when 12 => rgb_red <= "10011001";
            when 13 => rgb_red <= "11000110";
            when 14 => rgb_red <= "00100110";
            when 15 => rgb_red <= "11010110";
            when 16 => rgb_red <= "00100100";
            when 17 => rgb_red <= "11001001";
            when 18 => rgb_red <= "11000110";
            when 19 => rgb_red <= "11111100";
            when 20 => rgb_red <= "00110111";
            when 21 => rgb_red <= "10010000";
            when 22 => rgb_red <= "11000010";
            when 23 => rgb_red <= "00011100";
            when 24 => rgb_red <= "10010010";
            when 25 => rgb_red <= "11111111";
            when 26 => rgb_red <= "00110111";
            when 27 => rgb_red <= "10111101";
            when 28 => rgb_red <= "10000101";
            when 29 => rgb_red <= "11010100";
            when 30 => rgb_red <= "10101110";
            when 31 => rgb_red <= "01001110";
            when 32 => rgb_red <= "11010100";
            when 33 => rgb_red <= "11110000";
            when 34 => rgb_red <= "11001110";
            when 35 => rgb_red <= "00110000";
            when 36 => rgb_red <= "11101101";
            when 37 => rgb_red <= "10000110";
            when 38 => rgb_red <= "00001100";
            when 39 => rgb_red <= "10100001";
            when 40 => rgb_red <= "10001001";
            when 41 => rgb_red <= "00001011";
            when 42 => rgb_red <= "00100110";
            when 43 => rgb_red <= "01101101";
            when 44 => rgb_red <= "00001100";
            when 45 => rgb_red <= "11100100";
            when 46 => rgb_red <= "00110001";
            when 47 => rgb_red <= "00100000";
            when 48 => rgb_red <= "11111001";
            when others => rgb_red <= "00110000";
        end case;
        case i is
            when 0 => rgb_green <= "10110001";
            when 1 => rgb_green <= "10110101";
            when 2 => rgb_green <= "01011111";
            when 3 => rgb_green <= "11011110";
            when 4 => rgb_green <= "01010011";
            when 5 => rgb_green <= "00101111";
            when 6 => rgb_green <= "00100010";
            when 7 => rgb_green <= "01001101";
            when 8 => rgb_green <= "00001000";
            when 9 => rgb_green <= "01101011";
            when 10 => rgb_green <= "10111011";
            when 11 => rgb_green <= "10011110";
            when 12 => rgb_green <= "10001001";
            when 13 => rgb_green <= "10010111";
            when 14 => rgb_green <= "11100010";
            when 15 => rgb_green <= "10010100";
            when 16 => rgb_green <= "10111010";
            when 17 => rgb_green <= "10011101";
            when 18 => rgb_green <= "01000010";
            when 19 => rgb_green <= "10101001";
            when 20 => rgb_green <= "11010001";
            when 21 => rgb_green <= "11110011";
            when 22 => rgb_green <= "01011011";
            when 23 => rgb_green <= "11011100";
            when 24 => rgb_green <= "01001001";
            when 25 => rgb_green <= "00110100";
            when 26 => rgb_green <= "10111101";
            when 27 => rgb_green <= "01110010";
            when 28 => rgb_green <= "01001011";
            when 29 => rgb_green <= "01100110";
            when 30 => rgb_green <= "01000111";
            when 31 => rgb_green <= "10011100";
            when 32 => rgb_green <= "11010110";
            when 33 => rgb_green <= "11011001";
            when 34 => rgb_green <= "00101100";
            when 35 => rgb_green <= "11111111";
            when 36 => rgb_green <= "00001110";
            when 37 => rgb_green <= "10110010";
            when 38 => rgb_green <= "00110111";
            when 39 => rgb_green <= "11100001";
            when 40 => rgb_green <= "11101110";
            when 41 => rgb_green <= "00100010";
            when 42 => rgb_green <= "11100011";
            when 43 => rgb_green <= "11000100";
            when 44 => rgb_green <= "10111101";
            when 45 => rgb_green <= "01110111";
            when 46 => rgb_green <= "11100100";
            when 47 => rgb_green <= "00010100";
            when 48 => rgb_green <= "01000010";
            when others => rgb_green <= "11100110";
        end case;
        case i is
            when 0 => rgb_blue <= "10010010";
            when 1 => rgb_blue <= "11110001";
            when 2 => rgb_blue <= "10000011";
            when 3 => rgb_blue <= "10101010";
            when 4 => rgb_blue <= "11110010";
            when 5 => rgb_blue <= "00010100";
            when 6 => rgb_blue <= "01101101";
            when 7 => rgb_blue <= "00111100";
            when 8 => rgb_blue <= "01001010";
            when 9 => rgb_blue <= "00011010";
            when 10 => rgb_blue <= "10101000";
            when 11 => rgb_blue <= "01111111";
            when 12 => rgb_blue <= "11000001";
            when 13 => rgb_blue <= "01110010";
            when 14 => rgb_blue <= "00001101";
            when 15 => rgb_blue <= "01110101";
            when 16 => rgb_blue <= "11111111";
            when 17 => rgb_blue <= "00111000";
            when 18 => rgb_blue <= "10110111";
            when 19 => rgb_blue <= "11000010";
            when 20 => rgb_blue <= "01001010";
            when 21 => rgb_blue <= "11010110";
            when 22 => rgb_blue <= "10010111";
            when 23 => rgb_blue <= "10110101";
            when 24 => rgb_blue <= "01001000";
            when 25 => rgb_blue <= "11101100";
            when 26 => rgb_blue <= "00011001";
            when 27 => rgb_blue <= "01110110";
            when 28 => rgb_blue <= "11110111";
            when 29 => rgb_blue <= "11000101";
            when 30 => rgb_blue <= "11101001";
            when 31 => rgb_blue <= "00100111";
            when 32 => rgb_blue <= "01111111";
            when 33 => rgb_blue <= "11110101";
            when 34 => rgb_blue <= "11010010";
            when 35 => rgb_blue <= "00110101";
            when 36 => rgb_blue <= "00111100";
            when 37 => rgb_blue <= "11000011";
            when 38 => rgb_blue <= "11011111";
            when 39 => rgb_blue <= "10010011";
            when 40 => rgb_blue <= "01010110";
            when 41 => rgb_blue <= "01110111";
            when 42 => rgb_blue <= "01110111";
            when 43 => rgb_blue <= "11001111";
            when 44 => rgb_blue <= "10010100";
            when 45 => rgb_blue <= "01101101";
            when 46 => rgb_blue <= "00000110";
            when 47 => rgb_blue <= "00011100";
            when 48 => rgb_blue <= "10001111";
            when others => rgb_blue <= "10011100";
        end case;
        if (i > 2) then
            case (i - 3) is
                when 0 => output_y_s <= "10010111";
                when 1 => output_y_s <= "10110100";
                when 2 => output_y_s <= "01010111";
                when 3 => output_y_s <= "11010011";
                when 4 => output_y_s <= "01011001";
                when 5 => output_y_s <= "01001000";
                when 6 => output_y_s <= "01001110";
                when 7 => output_y_s <= "00111100";
                when 8 => output_y_s <= "01001010";
                when 9 => output_y_s <= "01010111";
                when 10 => output_y_s <= "10110100";
                when 11 => output_y_s <= "10010100";
                when 12 => output_y_s <= "10010100";
                when 13 => output_y_s <= "10100001";
                when 14 => output_y_s <= "10010010";
                when 15 => output_y_s <= "10100100";
                when 16 => output_y_s <= "10010101";
                when 17 => output_y_s <= "10011111";
                when 18 => output_y_s <= "01110111";
                when 19 => output_y_s <= "11000101";
                when 20 => output_y_s <= "10010100";
                when 21 => output_y_s <= "11010010";
                when 22 => output_y_s <= "10000001";
                when 23 => output_y_s <= "10011110";
                when 24 => output_y_s <= "01011111";
                when 25 => output_y_s <= "10000110";
                when 26 => output_y_s <= "10000010";
                when 27 => output_y_s <= "10001001";
                when 28 => output_y_s <= "01110000";
                when 29 => output_y_s <= "10010010";
                when 30 => output_y_s <= "01111000";
                when 31 => output_y_s <= "01110111";
                when 32 => output_y_s <= "11001100";
                when 33 => output_y_s <= "11100011";
                when 34 => output_y_s <= "01110000";
                when 35 => output_y_s <= "10101010";
                when 36 => output_y_s <= "01010110";
                when 37 => output_y_s <= "10100111";
                when 38 => output_y_s <= "00111101";
                when 39 => output_y_s <= "11000101";
                when 40 => output_y_s <= "10111111";
                when 41 => output_y_s <= "00100101";
                when 42 => output_y_s <= "10011110";
                when 43 => output_y_s <= "10101011";
                when 44 => output_y_s <= "10000011";
                when 45 => output_y_s <= "10010111";
                when 46 => output_y_s <= "10010101";
                when 47 => output_y_s <= "00011001";
                when 48 => output_y_s <= "10000010";
                when others => output_y_s <= "10100111";
            end case;
            case (i - 3) is
                when 0 => output_cb_s <= "01111101";
                when 1 => output_cb_s <= "10100010";
                when 2 => output_cb_s <= "10011001";
                when 3 => output_cb_s <= "01101001";
                when 4 => output_cb_s <= "11010110";
                when 5 => output_cb_s <= "01100011";
                when 6 => output_cb_s <= "10010010";
                when 7 => output_cb_s <= "10000000";
                when 8 => output_cb_s <= "10000000";
                when 9 => output_cb_s <= "01011110";
                when 10 => output_cb_s <= "01111001";
                when 11 => output_cb_s <= "01110100";
                when 12 => output_cb_s <= "10011001";
                when 13 => output_cb_s <= "01100110";
                when 14 => output_cb_s <= "00110101";
                when 15 => output_cb_s <= "01100101";
                when 16 => output_cb_s <= "10111100";
                when 17 => output_cb_s <= "01000110";
                when 18 => output_cb_s <= "10100100";
                when 19 => output_cb_s <= "01111110";
                when 20 => output_cb_s <= "01010110";
                when 21 => output_cb_s <= "10000010";
                when 22 => output_cb_s <= "10001101";
                when 23 => output_cb_s <= "10001101";
                when 24 => output_cb_s <= "01110011";
                when 25 => output_cb_s <= "10111010";
                when 26 => output_cb_s <= "01000101";
                when 27 => output_cb_s <= "01110101";
                when 28 => output_cb_s <= "11001100";
                when 29 => output_cb_s <= "10011101";
                when 30 => output_cb_s <= "11000000";
                when 31 => output_cb_s <= "01010011";
                when 32 => output_cb_s <= "01010101";
                when 33 => output_cb_s <= "10001010";
                when 34 => output_cb_s <= "10111000";
                when 35 => output_cb_s <= "00111110";
                when 36 => output_cb_s <= "01110001";
                when 37 => output_cb_s <= "10010000";
                when 38 => output_cb_s <= "11011011";
                when 39 => output_cb_s <= "01100100";
                when 40 => output_cb_s <= "01000101";
                when 41 => output_cb_s <= "10101110";
                when 42 => output_cb_s <= "01101010";
                when 43 => output_cb_s <= "10010100";
                when 44 => output_cb_s <= "10001001";
                when 45 => output_cb_s <= "01101001";
                when 46 => output_cb_s <= "00101111";
                when 47 => output_cb_s <= "10000010";
                when 48 => output_cb_s <= "10001000";
                when others => output_cb_s <= "01111010";
            end case;
            case (i - 3) is
                when 0 => output_cr_s <= "01011101";
                when 1 => output_cr_s <= "01101110";
                when 2 => output_cr_s <= "01101001";
                when 3 => output_cr_s <= "01111011";
                when 4 => output_cr_s <= "01011111";
                when 5 => output_cr_s <= "10110001";
                when 6 => output_cr_s <= "10110101";
                when 7 => output_cr_s <= "01101000";
                when 8 => output_cr_s <= "11011101";
                when 9 => output_cr_s <= "01110101";
                when 10 => output_cr_s <= "01111010";
                when 11 => output_cr_s <= "01110111";
                when 12 => output_cr_s <= "10000011";
                when 13 => output_cr_s <= "10011011";
                when 14 => output_cr_s <= "00110011";
                when 15 => output_cr_s <= "10100100";
                when 16 => output_cr_s <= "00101111";
                when 17 => output_cr_s <= "10011110";
                when 18 => output_cr_s <= "10111000";
                when 19 => output_cr_s <= "10100111";
                when 20 => output_cr_s <= "00111110";
                when 21 => output_cr_s <= "01010001";
                when 22 => output_cr_s <= "10101111";
                when 23 => output_cr_s <= "00100011";
                when 24 => output_cr_s <= "10100101";
                when 25 => output_cr_s <= "11010111";
                when 26 => output_cr_s <= "01001010";
                when 27 => output_cr_s <= "10100101";
                when 28 => output_cr_s <= "10001111";
                when 29 => output_cr_s <= "10101111";
                when 30 => output_cr_s <= "10100110";
                when 31 => output_cr_s <= "01100011";
                when 32 => output_cr_s <= "10000110";
                when 33 => output_cr_s <= "10001001";
                when 34 => output_cr_s <= "11000100";
                when 35 => output_cr_s <= "00101001";
                when 36 => output_cr_s <= "11101100";
                when 37 => output_cr_s <= "01101001";
                when 38 => output_cr_s <= "01011101";
                when 39 => output_cr_s <= "01100110";
                when 40 => output_cr_s <= "01011010";
                when 41 => output_cr_s <= "01101110";
                when 42 => output_cr_s <= "00101010";
                when 43 => output_cr_s <= "01010100";
                when 44 => output_cr_s <= "00101011";
                when 45 => output_cr_s <= "10110111";
                when 46 => output_cr_s <= "00111001";
                when 47 => output_cr_s <= "10000101";
                when 48 => output_cr_s <= "11010101";
                when others => output_cr_s <= "00101011";
            end case;
            wait for 1 * 1 ns;
            write(L, string'("Output should be: "));
            write(L, to_string(to_integer(output_y_s)));
            write(L, string'(" "));
            write(L, to_string(to_integer(output_cb_s)));
            write(L, string'(" "));
            write(L, to_string(to_integer(output_cr_s)));
            write(L, string'("---Real output is: "));
            write(L, to_string(to_integer(ycbcr_y)));
            write(L, string'(" "));
            write(L, to_string(to_integer(ycbcr_cb)));
            write(L, string'(" "));
            write(L, to_string(to_integer(ycbcr_cr)));
            writeline(output, L);
            assert (output_y_s = ycbcr_y)
                report "*** AssertionError ***"
                severity error;
            assert (output_cb_s = ycbcr_cb)
                report "*** AssertionError ***"
                severity error;
            assert (output_cr_s = ycbcr_cr)
                report "*** AssertionError ***"
                severity error;
        end if;
    end loop;
    assert False report "End of Simulation" severity Failure;
    wait;
end process TEST_STIMULUS;


TEST_RESETONSTART: process is
begin
    reset <= '1';
    wait until falling_edge(clk);
    reset <= '0';
    wait;
end process TEST_RESETONSTART;


TEST_CLKGEN: process is
begin
    clk <= '0';
    while True loop
        wait for 10 * 1 ns;
        clk <= stdl((not bool(clk)));
    end loop;
    wait;
end process TEST_CLKGEN;


TEST_RGB2YCBCR_1_LOGIC: process (clk, reset) is
begin
    if (reset = '1') then
        rgb2ycbcr_1_Y_sum <= to_signed(000000, 24);
        rgb2ycbcr_1_Cb_sum <= to_signed(000000, 24);
        ycbcr_cb <= to_unsigned(00, 8);
        enable_out <= '0';
        rgb2ycbcr_1_Cr_reg(0) <= to_signed(000000, 24);
        rgb2ycbcr_1_Cr_reg(1) <= to_signed(000000, 24);
        rgb2ycbcr_1_Cr_reg(2) <= to_signed(000000, 24);
        rgb2ycbcr_1_enable_out_reg(0) <= '0';
        rgb2ycbcr_1_enable_out_reg(1) <= '0';
        rgb2ycbcr_1_Y_reg(0) <= to_signed(000000, 24);
        rgb2ycbcr_1_Y_reg(1) <= to_signed(000000, 24);
        rgb2ycbcr_1_Y_reg(2) <= to_signed(000000, 24);
        rgb2ycbcr_1_Cr_sum <= to_signed(000000, 24);
        ycbcr_cr <= to_unsigned(00, 8);
        rgb2ycbcr_1_Cb_reg(0) <= to_signed(000000, 24);
        rgb2ycbcr_1_Cb_reg(1) <= to_signed(000000, 24);
        rgb2ycbcr_1_Cb_reg(2) <= to_signed(000000, 24);
        ycbcr_y <= to_unsigned(00, 8);
    elsif rising_edge(clk) then
        if (enable_in = '1') then
            rgb2ycbcr_1_Y_reg(0) <= (rgb2ycbcr_1_R_s * rgb2ycbcr_1_Y1_s);
            rgb2ycbcr_1_Y_reg(1) <= (rgb2ycbcr_1_G_s * rgb2ycbcr_1_Y2_s);
            rgb2ycbcr_1_Y_reg(2) <= (rgb2ycbcr_1_B_s * rgb2ycbcr_1_Y3_s);
            rgb2ycbcr_1_Cb_reg(0) <= (rgb2ycbcr_1_R_s * rgb2ycbcr_1_Cb1_s);
            rgb2ycbcr_1_Cb_reg(1) <= (rgb2ycbcr_1_G_s * rgb2ycbcr_1_Cb2_s);
            rgb2ycbcr_1_Cb_reg(2) <= (rgb2ycbcr_1_B_s * rgb2ycbcr_1_Cb3_s);
            rgb2ycbcr_1_Cr_reg(0) <= (rgb2ycbcr_1_R_s * rgb2ycbcr_1_Cr1_s);
            rgb2ycbcr_1_Cr_reg(1) <= (rgb2ycbcr_1_G_s * rgb2ycbcr_1_Cr2_s);
            rgb2ycbcr_1_Cr_reg(2) <= (rgb2ycbcr_1_B_s * rgb2ycbcr_1_Cr3_s);
            rgb2ycbcr_1_Y_sum <= (((rgb2ycbcr_1_Y_reg(0) + rgb2ycbcr_1_Y_reg(1)) + rgb2ycbcr_1_Y_reg(2)) + rgb2ycbcr_1_offset_y);
            rgb2ycbcr_1_Cb_sum <= (((rgb2ycbcr_1_Cb_reg(0) + rgb2ycbcr_1_Cb_reg(1)) + rgb2ycbcr_1_Cb_reg(2)) + rgb2ycbcr_1_offset_cb);
            rgb2ycbcr_1_Cr_sum <= (((rgb2ycbcr_1_Cr_reg(0) + rgb2ycbcr_1_Cr_reg(1)) + rgb2ycbcr_1_Cr_reg(2)) + rgb2ycbcr_1_offset_cr);
            -- the part which must be checked for rounding is the partm from signal[fract_bits + nbits:fract_bits]
            if ((rgb2ycbcr_1_Y_sum((14 - 1)) = '1') and (signed(resize(unsigned(rgb2ycbcr_1_Y_sum(22-1 downto 14)), 9)) /= (2 ** 8))) then
                ycbcr_y <= (unsigned(rgb2ycbcr_1_Y_sum(22-1 downto 14)) + 1);
            else
                ycbcr_y <= unsigned(rgb2ycbcr_1_Y_sum(22-1 downto 14));
            end if;
            if ((rgb2ycbcr_1_Cb_sum((14 - 1)) = '1') and (signed(resize(unsigned(rgb2ycbcr_1_Cb_sum(22-1 downto 14)), 9)) /= (2 ** 8))) then
                ycbcr_cb <= (unsigned(rgb2ycbcr_1_Cb_sum(22-1 downto 14)) + 1);
            else
                ycbcr_cb <= unsigned(rgb2ycbcr_1_Cb_sum(22-1 downto 14));
            end if;
            if ((rgb2ycbcr_1_Cr_sum((14 - 1)) = '1') and (signed(resize(unsigned(rgb2ycbcr_1_Cr_sum(22-1 downto 14)), 9)) /= (2 ** 8))) then
                ycbcr_cr <= (unsigned(rgb2ycbcr_1_Cr_sum(22-1 downto 14)) + 1);
            else
                ycbcr_cr <= unsigned(rgb2ycbcr_1_Cr_sum(22-1 downto 14));
            end if;
            rgb2ycbcr_1_enable_out_reg(0) <= enable_in;
            rgb2ycbcr_1_enable_out_reg(1) <= rgb2ycbcr_1_enable_out_reg(0);
            enable_out <= rgb2ycbcr_1_enable_out_reg(1);
        else
            enable_out <= '0';
        end if;
    end if;
end process TEST_RGB2YCBCR_1_LOGIC;



rgb2ycbcr_1_R_s <= signed(resize(rgb_red, 9));
rgb2ycbcr_1_G_s <= signed(resize(rgb_green, 9));
rgb2ycbcr_1_B_s <= signed(resize(rgb_blue, 9));

end architecture MyHDL;
