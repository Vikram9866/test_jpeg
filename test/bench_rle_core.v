// File: bench_rle_core.v
// Generated by MyHDL 1.0dev
// Date: Mon Jun 20 15:48:52 2016


`timescale 1ns/10ps

module bench_rle_core (

);



reg reset;
reg clock;
reg rle_0_zrl_processing;
reg signed [11:0] rle_0_prev_dc_0;
reg [63:0] rle_0_read_cnt;
reg [63:0] rle_0_write_cnt;
wire [2:0] rle_0_rleconfig_color_component;
reg rle_0_divalid;
reg rle_0_rlesymbols_dovalid;
reg [3:0] rle_0_rlesymbols_temp_runlength;
wire [5:0] rle_0_rleconfig_read_addr;
reg rle_0_rlesymbols_temp_dovalid;
reg [63:0] rle_0_zero_cnt;
reg signed [12:0] rle_0_accumulator;
reg rle_0_read_en;
reg signed [11:0] rle_0_rlesymbols_temp_amplitude;
reg rle_0_divalid_en;
reg signed [11:0] rle_0_prev_dc_1;
wire [3:0] rle_0_rlesymbols_size;
wire signed [11:0] rle_0_rlesymbols_amplitude;
wire rle_0_datastream_start;
reg [3:0] rle_0_rlesymbols_temp_size;
reg signed [11:0] rle_0_prev_dc_2;
reg [3:0] rle_0_rlesymbols_runlength;
reg signed [11:0] rle_0_zrl_data_in;
wire rle_0_rleconfig_sof;
wire [11:0] rle_0_datastream_input_val;


assign rle_0_rleconfig_color_component = 3'd0;
assign rle_0_datastream_start = 1'd0;
assign rle_0_rleconfig_sof = 1'd0;
assign rle_0_datastream_input_val = 12'd0;


function integer MYHDL4_sub;
    input signed [12-1:0] num1;
    input signed [12-1:0] num2;
begin: MYHDL19_RETURN
    MYHDL4_sub = (num1 - num2);
    disable MYHDL19_RETURN;
end
endfunction

function integer MYHDL5_sub;
    input signed [12-1:0] num1;
    input signed [12-1:0] num2;
begin: MYHDL20_RETURN
    MYHDL5_sub = (num1 - num2);
    disable MYHDL20_RETURN;
end
endfunction

function integer MYHDL6_sub;
    input signed [12-1:0] num1;
    input signed [12-1:0] num2;
begin: MYHDL21_RETURN
    MYHDL6_sub = (num1 - num2);
    disable MYHDL21_RETURN;
end
endfunction

function integer MYHDL8_nbits;
    input signed [13-1:0] num;
    input WIDTH;
    integer WIDTH;
    integer i;
begin: MYHDL22_RETURN
    i = (WIDTH - 1);
    while ((i >= 0)) begin
        if ((num[i] == 1)) begin
            MYHDL8_nbits = (i + 1);
            disable MYHDL22_RETURN;
        end
        i = (i - 1);
    end
    MYHDL8_nbits = num[WIDTH];
    disable MYHDL22_RETURN;
end
endfunction

function integer MYHDL11_two2bin;
    input signed [13-1:0] num;
    reg signed [13-1:0] inum;
begin: MYHDL23_RETURN
    inum = (~num);
    MYHDL11_two2bin = (inum + 1);
    disable MYHDL23_RETURN;
end
endfunction

function integer MYHDL12_nbits;
    input [12-1:0] num;
    input WIDTH;
    integer WIDTH;
    integer i;
begin: MYHDL24_RETURN
    i = (WIDTH - 1);
    while ((i >= 0)) begin
        if ((num[i] == 1)) begin
            MYHDL12_nbits = (i + 1);
            disable MYHDL24_RETURN;
        end
        i = (i - 1);
    end
    MYHDL12_nbits = num[WIDTH];
    disable MYHDL24_RETURN;
end
endfunction


initial begin: BENCH_RLE_CORE_TBSTIM
    @(posedge clock);
    $write("Conversion done!!");
    $write("\n");
    $finish;
end

// arssign size amplitude and read address

assign rle_0_rlesymbols_size = rle_0_rlesymbols_temp_size;
assign rle_0_rlesymbols_amplitude = rle_0_rlesymbols_temp_amplitude;
assign rle_0_rleconfig_read_addr = rle_0_read_cnt;

// sequential block to calculate the runlength
always @(posedge clock, posedge reset) begin: BENCH_RLE_CORE_RLE_0_MAINPROCESSING
    if (reset == 1) begin
        rle_0_zrl_processing <= 0;
        rle_0_read_cnt <= 0000000000000000;
        rle_0_divalid_en <= 0;
        rle_0_zero_cnt <= 0000000000000000;
        rle_0_write_cnt <= 0000000000000000;
        rle_0_rlesymbols_runlength <= 0;
        rle_0_prev_dc_1 <= 000;
        rle_0_divalid <= 0;
        rle_0_rlesymbols_dovalid <= 0;
        rle_0_rlesymbols_temp_runlength <= 0;
        rle_0_prev_dc_2 <= 000;
        rle_0_rlesymbols_temp_dovalid <= 0;
        rle_0_zrl_data_in <= 000;
        rle_0_accumulator <= 0000;
        rle_0_prev_dc_0 <= 000;
        rle_0_read_en <= 0;
    end
    else begin
        rle_0_rlesymbols_temp_dovalid <= 0;
        rle_0_rlesymbols_temp_runlength <= 0;
        rle_0_rlesymbols_runlength <= rle_0_rlesymbols_temp_runlength;
        rle_0_rlesymbols_dovalid <= rle_0_rlesymbols_temp_dovalid;
        rle_0_divalid <= rle_0_read_en;
        if (rle_0_datastream_start) begin
            rle_0_read_cnt <= 0;
            rle_0_read_en <= 1'b1;
            rle_0_divalid_en <= 1'b1;
        end
        if ((rle_0_divalid && (rle_0_write_cnt == 63))) begin
            rle_0_divalid_en <= 1'b0;
        end
        if (rle_0_read_en) begin
            if ((rle_0_read_cnt == 63)) begin
                rle_0_read_cnt <= 0;
                rle_0_read_en <= 1'b0;
            end
            else begin
                rle_0_read_cnt <= (rle_0_read_cnt + 1);
            end
        end
        if (rle_0_divalid) begin
            rle_0_write_cnt <= (rle_0_write_cnt + 1);
            if ((rle_0_write_cnt == 0)) begin
                if (((rle_0_rleconfig_color_component == 0) || (rle_0_rleconfig_color_component == 1))) begin
                    rle_0_accumulator <= MYHDL4_sub(rle_0_datastream_input_val, rle_0_prev_dc_0);
                    rle_0_prev_dc_0 <= rle_0_datastream_input_val;
                end
                else if ((rle_0_rleconfig_color_component == 2)) begin
                    rle_0_accumulator <= MYHDL5_sub(rle_0_datastream_input_val, rle_0_prev_dc_1);
                    rle_0_prev_dc_1 <= rle_0_datastream_input_val;
                end
                else if ((rle_0_rleconfig_color_component == 3)) begin
                    rle_0_accumulator <= MYHDL6_sub(rle_0_datastream_input_val, rle_0_prev_dc_2);
                    rle_0_prev_dc_2 <= rle_0_datastream_input_val;
                end
                else begin
                    // pass
                end
                rle_0_rlesymbols_temp_runlength <= 0;
                rle_0_rlesymbols_temp_dovalid <= 1'b1;
            end
            else begin
                if ((rle_0_datastream_input_val == 0)) begin
                    if ((rle_0_write_cnt == 63)) begin
                        rle_0_accumulator <= 0;
                        rle_0_rlesymbols_temp_runlength <= 0;
                        rle_0_rlesymbols_temp_dovalid <= 1'b1;
                    end
                    else begin
                        rle_0_zero_cnt <= (rle_0_zero_cnt + 1);
                    end
                end
                else begin
                    if ((rle_0_write_cnt == 63)) begin
                        rle_0_write_cnt <= 0;
                    end
                    if ((rle_0_zero_cnt <= 15)) begin
                        rle_0_accumulator <= rle_0_datastream_input_val;
                        rle_0_rlesymbols_temp_runlength <= rle_0_zero_cnt;
                        rle_0_zero_cnt <= 0;
                        rle_0_rlesymbols_temp_dovalid <= 1'b1;
                    end
                    else begin
                        rle_0_accumulator <= 0;
                        rle_0_rlesymbols_temp_runlength <= 15;
                        rle_0_zero_cnt <= (rle_0_zero_cnt - 15);
                        rle_0_rlesymbols_temp_dovalid <= 1'b1;
                        rle_0_zrl_processing <= 1'b1;
                        rle_0_zrl_data_in <= rle_0_datastream_input_val;
                        rle_0_divalid <= 1'b0;
                        rle_0_read_cnt <= rle_0_read_cnt;
                    end
                end
            end
        end
        if (rle_0_zrl_processing) begin
            if ((rle_0_zero_cnt <= 15)) begin
                rle_0_accumulator <= rle_0_zrl_data_in;
                rle_0_rlesymbols_temp_runlength <= rle_0_zero_cnt;
                rle_0_zero_cnt <= 0;
                rle_0_rlesymbols_temp_dovalid <= 1'b1;
                rle_0_divalid <= rle_0_divalid_en;
                rle_0_zrl_processing <= 1'b0;
            end
            else begin
                rle_0_accumulator <= 0;
                rle_0_rlesymbols_temp_runlength <= 15;
                rle_0_zero_cnt <= (rle_0_zero_cnt - 15);
                rle_0_rlesymbols_temp_dovalid <= 1'b1;
                rle_0_divalid <= 1'b0;
                rle_0_read_cnt <= rle_0_read_cnt;
            end
        end
        if (rle_0_datastream_start) begin
            rle_0_zero_cnt <= 0;
            rle_0_write_cnt <= 0;
        end
        if (rle_0_rleconfig_sof) begin
            rle_0_prev_dc_0 <= 0;
            rle_0_prev_dc_1 <= 0;
            rle_0_prev_dc_2 <= 0;
        end
    end
end

// sequential block that finds amplitude and num of bits
always @(posedge clock, posedge reset) begin: BENCH_RLE_CORE_RLE_0_ENTROPYCODER_0_LOGIC
    reg [12-1:0] absval;
    if (reset == 1) begin
        rle_0_rlesymbols_temp_amplitude <= 000;
        rle_0_rlesymbols_temp_size <= 0;
    end
    else begin
        if ((rle_0_accumulator[12] == 0)) begin
            rle_0_rlesymbols_temp_amplitude <= rle_0_accumulator;
            rle_0_rlesymbols_temp_size <= MYHDL8_nbits(rle_0_accumulator, 12);
        end
        else begin
            rle_0_rlesymbols_temp_amplitude <= (rle_0_accumulator - 1);
            absval = 12'h0;
            absval = MYHDL11_two2bin(rle_0_accumulator);
            rle_0_rlesymbols_temp_size <= MYHDL12_nbits(absval, 12);
        end
    end
end


initial begin: BENCH_RLE_CORE_TBCLOCK_0_CLOCKGEN
    clock <= 1'b0;
    while (1'b1) begin
        # 10;
        clock <= (!clock);
    end
end


initial begin: BENCH_RLE_CORE_RESETONSTART_0_RESET_BUTTON
    reset <= 1'b1;
    # 40;
    @(posedge clock);
    reset <= 1'b0;
end

endmodule
